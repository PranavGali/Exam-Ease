.navbar{background-color:var(--dark-color);color:#fff;padding:1rem 0;box-shadow:0 2px 5px #0000001a;margin-bottom:2rem}.navbar-container{display:flex;justify-content:space-between;align-items:center}.navbar-logo{text-decoration:none;color:#fff}.navbar-logo h1{font-size:1.8rem;margin:0}.navbar-menu{display:flex;list-style:none}.navbar-menu li{margin-left:1.5rem}.navbar-menu a{color:#fff;text-decoration:none;font-weight:500;transition:color .3s}.navbar-menu a:hover{color:var(--primary-color)}.btn-logout{background:none;border:none;color:#fff;font-weight:500;cursor:pointer;font-size:1rem;transition:color .3s}.btn-logout:hover{color:var(--accent-color)}@media (max-width: 768px){.navbar-container{flex-direction:column}.navbar-menu{margin-top:1rem;flex-wrap:wrap;justify-content:center}.navbar-menu li{margin:.5rem}}.home{text-align:center}.hero{background-color:var(--dark-color);color:#fff;padding:4rem 2rem;border-radius:8px;margin-bottom:3rem}.hero h1{font-size:2.5rem;margin-bottom:1rem}.hero p{font-size:1.2rem;margin-bottom:2rem;max-width:600px;margin-left:auto;margin-right:auto}.hero-buttons{display:flex;justify-content:center;gap:1rem}.btn-secondary{background-color:transparent;border:2px solid var(--primary-color);color:#fff;padding:10px 15px;border-radius:4px;text-decoration:none;font-weight:600;transition:all .3s}.btn-secondary:hover{background-color:var(--primary-color)}.features{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:2rem;margin-bottom:3rem}.feature-card{background-color:#fff;border-radius:8px;padding:2rem;box-shadow:0 4px 6px #0000001a;transition:transform .3s}.feature-card:hover{transform:translateY(-5px)}.feature-card h3{color:var(--primary-color);margin-bottom:1rem;font-size:1.5rem}.feature-card ul{text-align:left;padding-left:1.5rem}.feature-card li{margin-bottom:.5rem}@media (max-width: 768px){.hero{padding:3rem 1rem}.hero h1{font-size:2rem}.features{grid-template-columns:1fr}}.auth-container{display:flex;justify-content:center;align-items:center;min-height:70vh}.auth-card{background:white;border-radius:8px;box-shadow:0 4px 10px #0000001a;padding:2rem;width:100%;max-width:500px}.auth-card h2{text-align:center;margin-bottom:1.5rem;color:var(--dark-color)}.btn-block{display:block;width:100%;margin-top:1rem;padding:12px;font-size:1rem}.auth-redirect{text-align:center;margin-top:1.5rem}.auth-redirect a{color:var(--primary-color);text-decoration:none;font-weight:600}.auth-redirect a:hover{text-decoration:underline}.dashboard{padding:1rem 0}.welcome-message{font-size:1.2rem;margin-bottom:2rem;color:var(--dark-color)}.dashboard-stats{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:1.5rem;margin-bottom:2rem}.stat-card{background-color:#fff;border-radius:8px;padding:1.5rem;box-shadow:0 2px 8px #0000001a;text-align:center}.stat-card h3{font-size:1rem;color:#666;margin-bottom:.5rem}.stat-value{font-size:2.5rem;font-weight:700;color:var(--primary-color)}.dashboard-sections{display:grid;grid-template-columns:1fr;gap:2rem}@media (min-width: 768px){.dashboard-sections{grid-template-columns:1fr 1fr}}.dashboard-section{background-color:#fff;border-radius:8px;padding:1.5rem;box-shadow:0 2px 8px #0000001a}.dashboard-section h2{margin-bottom:1.5rem;padding-bottom:.5rem;border-bottom:1px solid #eee;color:var(--dark-color)}.exam-list,.results-list{display:grid;gap:1rem}.exam-card,.result-card{border:1px solid #eee;border-radius:6px;padding:1rem;transition:transform .2s,box-shadow .2s}.exam-card:hover,.result-card:hover{transform:translateY(-3px);box-shadow:0 4px 8px #0000000d}.exam-details,.result-details{display:flex;justify-content:space-between;margin:.8rem 0;font-size:.9rem;color:#666}.no-data{color:#666;font-style:italic;text-align:center;padding:2rem 0}.btn-secondary{display:inline-block;background-color:transparent;border:1px solid var(--primary-color);color:var(--primary-color);padding:8px 12px;border-radius:4px;text-decoration:none;font-size:.9rem;transition:all .3s;text-align:center}.btn-secondary:hover{background-color:var(--primary-color);color:#fff}.admin-dashboard{padding:1rem 0}.admin-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:2rem}.admin-stats{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:1.5rem;margin-bottom:2rem}.admin-section{background-color:#fff;border-radius:8px;padding:1.5rem;box-shadow:0 2px 8px #0000001a;margin-bottom:2rem}.admin-section h2{margin-bottom:1.5rem;padding-bottom:.5rem;border-bottom:1px solid #eee}.admin-table{width:100%;border-collapse:collapse}.admin-table th,.admin-table td{padding:12px 15px;text-align:left;border-bottom:1px solid #eee}.admin-table th{background-color:#f8f9fa;font-weight:600}.admin-table tr:hover{background-color:#f8f9fa}.action-buttons{display:flex;gap:10px}.btn-edit,.btn-view{padding:6px 12px;border-radius:4px;text-decoration:none;font-size:.9rem;transition:all .3s}.btn-edit{background-color:var(--warning-color);color:#fff}.btn-edit:hover{background-color:#e67e22}.btn-view{background-color:var(--primary-color);color:#fff}.btn-view:hover{background-color:var(--secondary-color)}.no-exams{text-align:center;padding:2rem}.no-exams p{margin-bottom:1rem;color:#666}.exam-stats-grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(300px,1fr));gap:1.5rem}.exam-stat-card{border:1px solid #eee;border-radius:8px;padding:1.5rem;transition:transform .2s,box-shadow .2s}.exam-stat-card:hover{transform:translateY(-3px);box-shadow:0 4px 8px #0000000d}.exam-stat-card h3{margin-bottom:1rem;color:var(--dark-color)}.stat-details{display:grid;grid-template-columns:repeat(3,1fr);gap:1rem}.stat-item{display:flex;flex-direction:column;align-items:center}.stat-label{font-size:.9rem;color:#666;margin-bottom:.3rem}.stat-number{font-size:1.5rem;font-weight:700;color:var(--primary-color)}@media (max-width: 768px){.admin-header{flex-direction:column;align-items:flex-start;gap:1rem}.admin-table{display:block;overflow-x:auto}.stat-details{grid-template-columns:1fr}}.exam-form-container{padding:1rem 0}.form-section{background-color:#fff;border-radius:8px;padding:1.5rem;box-shadow:0 2px 8px #0000001a;margin-bottom:2rem}.form-section h2{margin-bottom:1.5rem;padding-bottom:.5rem;border-bottom:1px solid #eee}.form-row{display:grid;grid-template-columns:1fr 1fr;gap:1rem}@media (max-width: 768px){.form-row{grid-template-columns:1fr}}.questions-list{margin-bottom:2rem}.question-item{border:1px solid #eee;border-radius:6px;padding:1rem;margin-bottom:1rem}.question-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:1rem}.question-options ul{list-style-type:none;padding-left:1rem}.question-options li{margin-bottom:.5rem;padding:.5rem;border-radius:4px}.correct-option{background-color:#2ecc711a;border-left:3px solid var(--success-color)}.add-question-form{background-color:#f8f9fa;border-radius:6px;padding:1.5rem}.add-question-form h3{margin-bottom:1.5rem}.option-input{display:flex;align-items:center;margin-bottom:.5rem}.option-input input[type=radio]{width:auto;margin-right:10px}.option-input input[type=text]{flex-grow:1}.no-questions{text-align:center;padding:2rem;color:#666;font-style:italic}.form-buttons{display:flex;justify-content:space-between;margin-top:2rem}.exam-list-container{padding:1rem 0}.search-bar{margin-bottom:2rem}.search-bar input{padding:12px;border-radius:8px;border:1px solid #ddd;font-size:1rem;width:100%;max-width:500px}.exam-sections{display:grid;grid-template-columns:1fr;gap:2rem}@media (min-width: 992px){.exam-sections{grid-template-columns:1fr 1fr}}.exam-section{background-color:#fff;border-radius:8px;padding:1.5rem;box-shadow:0 2px 8px #0000001a}.exam-section h2{margin-bottom:1.5rem;padding-bottom:.5rem;border-bottom:1px solid #eee}.exams-grid{display:grid;gap:1.5rem}.exam-card{border:1px solid #eee;border-radius:8px;padding:1.5rem;transition:transform .2s,box-shadow .2s}.exam-card:hover{transform:translateY(-3px);box-shadow:0 4px 12px #0000001a}.exam-card h3{margin-bottom:.8rem;color:var(--dark-color)}.exam-card p{color:#666;margin-bottom:1rem;line-height:1.5}.exam-meta{display:flex;flex-wrap:wrap;gap:1rem;margin-bottom:1.5rem;font-size:.9rem;color:#666}.exam-buttons{display:flex;gap:.8rem}.btn-outline{display:inline-block;background-color:transparent;border:1px solid #ccc;color:#666;padding:8px 12px;border-radius:4px;text-decoration:none;font-size:.9rem;transition:all .3s}.btn-outline:hover{background-color:#f5f5f5;border-color:#999;color:#333}.passed{color:var(--success-color);font-weight:600}.failed{color:var(--danger-color);font-weight:600}.no-exams{text-align:center;padding:2rem;color:#666;font-style:italic}.exam-details-container{padding:1rem 0}.exam-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:2rem}.exam-status{padding:8px 16px;border-radius:20px;font-weight:600;font-size:.9rem}.exam-status.available{background-color:#e3f2fd;color:#1976d2}.exam-status.passed{background-color:#e8f5e9;color:#2e7d32}.exam-status.failed{background-color:#ffebee;color:#c62828}.exam-info-card{background-color:#fff;border-radius:8px;padding:2rem;box-shadow:0 2px 8px #0000001a;margin-bottom:2rem}.exam-description{margin-bottom:2rem;line-height:1.6}.exam-meta-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:1.5rem;margin-bottom:2rem;border-top:1px solid #eee;border-bottom:1px solid #eee;padding:1.5rem 0}.meta-item{display:flex;flex-direction:column}.meta-value{font-size:1.5rem;font-weight:600;color:var(--dark-color)}.exam-result-summary{margin-top:2rem}.exam-result-summary h3{margin-bottom:1rem;color:var(--dark-color)}.result-details{display:flex;gap:2rem;margin-bottom:1.5rem}.result-item{display:flex;flex-direction:column}.result-label{font-size:.9rem;color:#666;margin-bottom:.3rem}.result-value{font-size:1.8rem;font-weight:700;color:var(--primary-color)}.exam-actions{display:flex;gap:1rem;margin-top:1.5rem}.exam-content-preview{background-color:#fff;border-radius:8px;padding:2rem;box-shadow:0 2px 8px #0000001a}.exam-content-preview h2{margin-bottom:1.5rem;padding-bottom:.5rem;border-bottom:1px solid #eee}.question-types{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:1.5rem;margin-bottom:2rem}.question-type{background-color:#f8f9fa;border-radius:8px;padding:1.5rem;text-align:center}.question-type h3{margin-bottom:.5rem;color:var(--dark-color)}.question-type p{font-size:1.5rem;font-weight:600;color:var(--primary-color)}.exam-instructions{background-color:#f8f9fa;border-radius:8px;padding:1.5rem}<boltAction type="file" filePath="src/components/exams/TakeExam.jsx"> import React,{useState,useContext,useEffect,useRef}from "react"; import{useParams,useNavigate}from "react-router-dom"; import{AuthContext}from "../../contexts/AuthContext"; import{ExamContext}from "../../contexts/ExamContext"; import "./TakeExam.css"; const TakeExam = () =>{const {id} = useParams();const navigate = useNavigate();const {currentUser} = useContext(AuthContext);const {getExam,submitExamResult,getUserResults} = useContext(ExamContext);const [exam,setExam] = useState(null);const [currentQuestionIndex,setCurrentQuestionIndex] = useState(0);const [answers,setAnswers] = useState({});const [timeLeft,setTimeLeft] = useState(0);const [examStarted,setExamStarted] = useState(false);const [loading,setLoading] = useState(true);const [error,setError] = useState("");const timerRef = useRef(null);useEffect(() => {const examData = getExam(id); if (examData) {// Check if user has already taken this exam const results = getUserResults(currentUser.id); const alreadyTaken = results.some(r => r.examId === id); if (alreadyTaken) {setError("You have already taken this exam"); setTimeout(() => {navigate(`/exams/${id}`);},3000); return;} setExam(examData); setTimeLeft(examData.duration * 60); // Convert minutes to seconds // Initialize answers object const initialAnswers = {}; examData.questions.forEach(question => {initialAnswers[question.id] = question.type === "mcq" ? "" : "";}); setAnswers(initialAnswers); setLoading(false);} else {navigate("/404");}},[id,getExam,navigate,currentUser,getUserResults]);useEffect(() => {if (examStarted && timeLeft > 0) {timerRef.current = setInterval(() => {setTimeLeft(prev => {if (prev <= 1) {clearInterval(timerRef.current); handleSubmit(); return 0;} return prev - 1;});},1000);} return () => {if (timerRef.current) {clearInterval(timerRef.current);}};},[examStarted,timeLeft]);const startExam = () => {setExamStarted(true);};const handleAnswerChange = (questionId,value) => {setAnswers({...answers,[questionId]: value});};const goToNextQuestion = () => {if (currentQuestionIndex < exam.questions.length - 1) {setCurrentQuestionIndex(currentQuestionIndex + 1);}};const goToPrevQuestion = () => {if (currentQuestionIndex > 0) {setCurrentQuestionIndex(currentQuestionIndex - 1);}};const handleSubmit = () => {if (timerRef.current) {clearInterval(timerRef.current);} // Calculate score let totalPoints = 0; let earnedPoints = 0; exam.questions.forEach(question => {totalPoints += question.points; if (question.type === "mcq") {if (answers[question.id] === question.correctAnswer) {earnedPoints += question.points;}} else {// For essay questions,we'll just give half points automatically
// In a real app,these would be graded by an instructor earnedPoints += question.points / 2;}}); const score = Math.round((earnedPoints / totalPoints) * 100); const passed = score >= exam.passingScore; // Submit result const result = submitExamResult({userId: currentUser.id,examId: exam.id,answers,score,passed,timeSpent: exam.duration * 60 - timeLeft}); // Navigate to results page navigate(`/results/${result.id}`);};const formatTime = (seconds) => {const mins = Math.floor(seconds / 60); const secs = seconds % 60; return `${mins.toString().padStart(2,"0")}:${secs.toString().padStart(2,"0")}`;};if (loading) {return <div>Loading...</div>;} if (error) {return (<div className="take-exam-container"> <div className="alert alert-danger">{error}</div> <p>Redirecting to exam details...</p> </div>);} if (!examStarted) {return (<div className="take-exam-container"> <div className="exam-start-card"> <h1>{exam.title}</h1> <div className="exam-info"> <p><strong>Duration:</strong> {exam.duration} minutes</p> <p><strong>Questions:</strong> {exam.questions.length}</p> <p><strong>Passing Score:</strong> {exam.passingScore}%</p> </div> <div className="exam-instructions"> <h2>Instructions</h2> <ul> <li>You have {exam.duration} minutes to complete this exam.</li> <li>The exam consists of {exam.questions.length} questions.</li> <li>You need to score at least {exam.passingScore}% to pass.</li> <li>Once you start the exam,you cannot pause or restart it.</li> <li>Ensure you have a stable internet connection before starting.</li> </ul> </div> <button className="btn-primary btn-start-exam" onClick={startExam} > Start Exam </button> </div> </div>);} const currentQuestion = exam.questions[currentQuestionIndex];return (<div className="take-exam-container"> <div className="exam-header"> <h1>{exam.title}</h1> <div className="exam-timer"> Time Left: <span className={timeLeft < 60 ? "time-warning" : ""}>{formatTime(timeLeft)}</span> </div> </div> <div className="exam-progress"> <div className="progress-bar"> <div className="progress-fill" style={{width: `${(currentQuestionIndex + 1) / exam.questions.length * 100}%`}} ></div> </div> <div className="progress-text"> Question {currentQuestionIndex + 1} of {exam.questions.length} </div> </div> <div className="question-card"> <div className="question-header"> <span className="question-type"> {currentQuestion.type === "mcq" ? "Multiple Choice" : "Essay"} </span> <span className="question-points"> {currentQuestion.points} points </span> </div> <div className="question-text"> <h2>{currentQuestion.text}</h2> </div> <div className="question-answer"> {currentQuestion.type === "mcq" ? (<div className="mcq-options"> {currentQuestion.options.map((option,index) => (<div key={index} className="mcq-option"> <input type="radio" id={`option-${index}`} name={`question-${currentQuestion.id}`} value={option} checked={answers[currentQuestion.id] === option} onChange={() => handleAnswerChange(currentQuestion.id,option)} /> <label htmlFor={`option-${index}`}>{option}</label> </div>))} </div>) : (<div className="essay-answer"> <textarea value={answers[currentQuestion.id]} onChange={(e) => handleAnswerChange(currentQuestion.id,e.target.value)} placeholder="Type your answer here..." rows="8" ></textarea> </div>)} </div> <div className="question-navigation"> <button className="btn-secondary" onClick={goToPrevQuestion} disabled={currentQuestionIndex === 0} > Previous </button> {currentQuestionIndex < exam.questions.length - 1 ? (<button className="btn-primary" onClick={goToNextQuestion} > Next </button>) : (<button className="btn-success" onClick={handleSubmit} > Submit Exam </button>)} </div> </div> <div className="question-navigation-dots"> {exam.questions.map((q,index) => (<button key={q.id} className={`nav-dot ${index === currentQuestionIndex ? "active" : ""} ${answers[q.id] ? "answered" : ""}`} onClick={() => setCurrentQuestionIndex(index)} title={`Question ${index + 1}`} > {index + 1} </button>))} </div> </div>)}; export default TakeExam; .exam-results-container{padding:1rem 0}.results-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:2rem}.result-badge{padding:8px 16px;border-radius:20px;font-weight:600;font-size:1rem}.result-badge.passed{background-color:#e8f5e9;color:#2e7d32}.result-badge.failed{background-color:#ffebee;color:#c62828}.results-summary-card,.results-details-card{background-color:#fff;border-radius:8px;padding:2rem;box-shadow:0 2px 8px #0000001a;margin-bottom:2rem}.results-meta{display:grid;grid-template-columns:repeat(auto-fit,minmax(150px,1fr));gap:1.5rem;margin:2rem 0}.result-meta-item{display:flex;flex-direction:column;align-items:center;text-align:center}.meta-label{font-size:.9rem;color:#666;margin-bottom:.5rem}.meta-value{font-size:1.8rem;font-weight:700;color:var(--dark-color)}.score-visualization{margin:2rem 0}.score-bar{height:24px;background-color:#e9ecef;border-radius:12px;position:relative;overflow:hidden;margin-bottom:.5rem}.score-fill{height:100%;transition:width 1s ease-out}.passing-line{position:absolute;top:0;height:100%;width:2px;background-color:#333}.score-labels{display:flex;justify-content:space-between;font-size:.9rem;color:#666}.passing-label{position:absolute;left:50%;transform:translate(-50%);white-space:nowrap}.question-review{border:1px solid #eee;border-radius:8px;padding:1.5rem;margin-bottom:1.5rem;position:relative}.question-review.correct{border-left:4px solid var(--success-color)}.question-review.incorrect{border-left:4px solid var(--danger-color)}.question-review.essay{border-left:4px solid var(--warning-color)}.question-number{position:absolute;top:-12px;left:20px;background-color:#fff;padding:0 10px;font-size:.9rem;color:#666}.question-content h3{margin-bottom:1.5rem;line-height:1.5}.options-list{display:flex;flex-direction:column;gap:.8rem;margin-bottom:1.5rem}.option-item{padding:1rem;border:1px solid #ddd;border-radius:8px}.option-item.selected-correct{background-color:#e8f5e9;border-color:var(--success-color)}.option-item.selected-incorrect{background-color:#ffebee;border-color:var(--danger-color)}.option-item.correct-answer{border-color:var(--success-color);border-style:dashed}.answer-feedback{display:flex;align-items:center;font-weight:600;margin-top:1rem}.feedback-icon{display:inline-flex;align-items:center;justify-content:center;width:24px;height:24px;border-radius:50%;margin-right:8px;font-size:.9rem}.correct-feedback{color:var(--success-color)}.correct-feedback .feedback-icon{background-color:var(--success-color);color:#fff}.incorrect-feedback{color:var(--danger-color)}.incorrect-feedback .feedback-icon{background-color:var(--danger-color);color:#fff}.essay-review h4{margin-bottom:1rem;color:#666}.essay-answer{background-color:#f8f9fa;border-radius:8px;padding:1.5rem;margin-bottom:1.5rem;white-space:pre-wrap}.essay-note{background-color:#fff8e1;border-radius:8px;padding:1rem;font-size:.9rem;color:#795548}.results-actions{display:flex;gap:1rem;justify-content:center}.not-found{text-align:center;padding:4rem 1rem}.not-found h1{font-size:6rem;color:var(--primary-color);margin:0}.not-found h2{font-size:2rem;margin-bottom:1rem}.not-found p{margin-bottom:2rem;color:#666}:root{--primary-color: #3498db;--secondary-color: #2980b9;--accent-color: #e74c3c;--light-color: #ecf0f1;--dark-color: #2c3e50;--success-color: #2ecc71;--warning-color: #f39c12;--danger-color: #e74c3c}*{margin:0;padding:0;box-sizing:border-box}body{font-family:Segoe UI,Tahoma,Geneva,Verdana,sans-serif;line-height:1.6;color:var(--dark-color);background-color:#f5f7fa}.container{max-width:1200px;margin:0 auto;padding:0 20px}button{cursor:pointer;padding:10px 15px;border:none;border-radius:4px;font-weight:600;transition:all .3s ease}.btn-primary{background-color:var(--primary-color);color:#fff}.btn-primary:hover{background-color:var(--secondary-color)}.btn-danger{background-color:var(--danger-color);color:#fff}.btn-danger:hover{background-color:#c0392b}.btn-success{background-color:var(--success-color);color:#fff}.btn-success:hover{background-color:#27ae60}input,select,textarea{width:100%;padding:10px;margin-bottom:15px;border:1px solid #ddd;border-radius:4px;font-size:16px}.card{background:white;border-radius:8px;box-shadow:0 2px 10px #0000001a;padding:20px;margin-bottom:20px}.form-group{margin-bottom:15px}.form-group label{display:block;margin-bottom:5px;font-weight:600}.alert{padding:10px 15px;border-radius:4px;margin-bottom:15px}.alert-success{background-color:#d4edda;color:#155724;border:1px solid #c3e6cb}.alert-danger{background-color:#f8d7da;color:#721c24;border:1px solid #f5c6cb}.flex{display:flex}.flex-between{justify-content:space-between;align-items:center}.grid{display:grid;grid-gap:20px}.grid-2{grid-template-columns:repeat(2,1fr)}@media (max-width: 768px){.grid-2{grid-template-columns:1fr}}
